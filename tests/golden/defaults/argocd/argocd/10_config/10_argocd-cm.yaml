apiVersion: v1
data:
  application.instanceLabelKey: argocd.argoproj.io/instance
  configManagementPlugins: |
    - name: kapitan
      generate:
        command: [kapitan, refs, --reveal, --refs-path, ../../refs/, --file, ./]
  repositories: '- url: ssh://git@git.example.com/org/repo.git'
  repository.credentials: |
    - url: ssh://git@
      sshPrivateKeySecret:
        name: argo-ssh-key
        key: sshPrivateKey
  resource.customizations: |
    admissionregistration.k8s.io/MutatingWebhookConfiguration:
      ignoreDifferences: |
        jsonPointers:
          - /webhooks/0/clientConfig/caBundle
    admissionregistration.k8s.io/ValidatingWebhookConfiguration:
      ignoreDifferences: |
        jsonPointers:
          - /webhooks/0/clientConfig/caBundle
    apiextensions.k8s.io/CustomResourceDefinition:
      ignoreDifferences: |
        jsonPointers:
          - /status
          - /spec/scope
    pkg.crossplane.io/Provider:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            installed = false
            healthy = false
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Installed" then
                installed = condition.status == "True"
                installed_message = condition.reason
              elseif condition.type == "Healthy" then
                healthy = condition.status == "True"
                healthy_message = condition.reason
              end
            end
            if installed and healthy then
              hs.status = "Healthy"
            else
              hs.status = "Degraded"
            end
            hs.message = installed_message .. " " .. healthy_message
            return hs
          end
        end

        hs.status = "Progressing"
        hs.message = "Waiting for provider to be installed"
        return hs
    operators.coreos.com/Subscription:
      health.lua.useOpenLibs: true
      health.lua: |
        -- Base check copied from upstream
        -- See https://github.com/argoproj/argo-cd/blob/f3730da01ef05c0b7ae97385aca6642faf9e4c52/resource_customizations/operators.coreos.com/Subscription/health.lua
        health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            numDegraded = 0
            numPending = 0
            msg = ""
            for i, condition in pairs(obj.status.conditions) do
              msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
              if condition.type == "InstallPlanPending" and condition.status == "True" then
                numPending = numPending + 1
              elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanMissing" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                -- Custom check to ignore ConstraintsNotSatisfiable for
                -- cilium-enterprise subscription.
                if condition.type == "ResolutionFailed"  and condition.reason == "ConstraintsNotSatisfiable" and string.find(condition.message, "cilium%-enterprise") then
                  msg = msg .. "; Ignoring ConstraintsNotSatisfiable for cilium-enterprise subscription"
                else
                  numDegraded = numDegraded + 1
                end
              end
            end
            if numDegraded == 0 and numPending == 0 then
              health_status.status = "Healthy"
              health_status.message = msg
              return health_status
            elseif numPending > 0 and numDegraded == 0 then
              health_status.status = "Progressing"
              health_status.message = "An install plan for a subscription is pending installation"
              return health_status
            else
              health_status.status = "Degraded"
              health_status.message = msg
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "An install plan for a subscription is pending installation"
        return health_status
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/part-of: argocd
    name: argocd-cm
  name: argocd-cm
  namespace: syn
