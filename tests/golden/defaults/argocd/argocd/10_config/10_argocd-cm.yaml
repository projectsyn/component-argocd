apiVersion: v1
data:
  application.instanceLabelKey: argocd.argoproj.io/instance
  configManagementPlugins: "- name: kapitan\n  generate:\n    command: [kapitan, refs,\
    \ --reveal, --refs-path, ../../refs/, --file, ./]\n"
  repositories: '- url: ssh://git@git.example.com/org/repo.git'
  repository.credentials: "- url: ssh://git@\n  sshPrivateKeySecret:\n    name: argo-ssh-key\n\
    \    key: sshPrivateKey\n"
  resource.customizations: "admissionregistration.k8s.io/MutatingWebhookConfiguration:\n\
    \  ignoreDifferences: |\n    jsonPointers:\n      - /webhooks/0/clientConfig/caBundle\n\
    admissionregistration.k8s.io/ValidatingWebhookConfiguration:\n  ignoreDifferences:\
    \ |\n    jsonPointers:\n      - /webhooks/0/clientConfig/caBundle\napiextensions.k8s.io/CustomResourceDefinition:\n\
    \  ignoreDifferences: |\n    jsonPointers:\n      - /status\n      - /spec/scope\n\
    pkg.crossplane.io/Provider:\n  health.lua: |\n    hs = {}\n    if obj.status ~=\
    \ nil then\n      if obj.status.conditions ~= nil then\n        installed = false\n\
    \        healthy = false\n        for i, condition in ipairs(obj.status.conditions)\
    \ do\n          if condition.type == \"Installed\" then\n            installed\
    \ = condition.status == \"True\"\n            installed_message = condition.reason\n\
    \          elseif condition.type == \"Healthy\" then\n            healthy = condition.status\
    \ == \"True\"\n            healthy_message = condition.reason\n          end\n\
    \        end\n        if installed and healthy then\n          hs.status = \"\
    Healthy\"\n        else\n          hs.status = \"Degraded\"\n        end\n   \
    \     hs.message = installed_message .. \" \" .. healthy_message\n        return\
    \ hs\n      end\n    end\n\n    hs.status = \"Progressing\"\n    hs.message =\
    \ \"Waiting for provider to be installed\"\n    return hs\noperators.coreos.com/Subscription:\n\
    \  health.lua.useOpenLibs: true\n  health.lua: |\n    -- Base check copied from\
    \ upstream\n    health_status = {}\n    if obj.status ~= nil then\n      if obj.status.conditions\
    \ ~= nil then\n        numDegraded = 0\n        numPending = 0\n        msg =\
    \ \"\"\n        for i, condition in pairs(obj.status.conditions) do\n        \
    \  msg = msg .. i .. \": \" .. condition.type .. \" | \" .. condition.status ..\
    \ \"\\n\"\n          if condition.type == \"InstallPlanPending\" and condition.status\
    \ == \"True\" then\n            numPending = numPending + 1\n          elseif\
    \ (condition.type == \"CatalogSourcesUnhealthy\" or condition.type == \"InstallPlanMissing\"\
    \ or condition.type == \"InstallPlanFailed\" or condition.type == \"ResolutionFailed\"\
    ) and condition.status == \"True\" then\n            if condition.type == \"ResolutionFailed\"\
    \  and condition.reason == \"ConstraintsNotSatisfiable\" and string.find(condition.message,\
    \ \"cilium%-enterprise\") then\n              msg = msg .. \"; Ignoring ConstraintsNotSatisfiable\
    \ for cilium-enterprise subscription\"\n            else\n              numDegraded\
    \ = numDegraded + 1\n            end\n          end\n        end\n        if numDegraded\
    \ == 0 and numPending == 0 then\n          health_status.status = \"Healthy\"\n\
    \          health_status.message = msg\n          return health_status\n     \
    \   elseif numPending > 0 and numDegraded == 0 then\n          health_status.status\
    \ = \"Progressing\"\n          health_status.message = \"An install plan for a\
    \ subscription is pending installation\"\n          return health_status\n   \
    \     else\n          health_status.status = \"Degraded\"\n          health_status.message\
    \ = msg\n          return health_status\n        end\n      end\n    end\n   \
    \ health_status.status = \"Progressing\"\n    health_status.message = \"An install\
    \ plan for a subscription is pending installation\"\n    return health_status\n"
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/part-of: argocd
    name: argocd-cm
  name: argocd-cm
  namespace: syn
