---
parameters:
  kapitan:
    dependencies:
      - type: https
        source: https://raw.githubusercontent.com/projectsyn/component-cert-manager/master/lib/cert-manager.libsonnet
        output_path: vendor/lib/cert-manager.libsonnet

  secret_management:
    vault_role: test
    vault_addr: test.syn.tools

  argocd:
    # Test overwriting images
    images:
      kapitan:
        registry: mymirror.io
        repository: projectsyn/kapitan
      vault_agent:
        registry: mymirror.io
        repository: vault
      kubectl:
        image: mymirror.io/kubectl
      kube_rbac_proxy:
        registry: mymirror.io
        tag: v1.1.1

    network_policies:
      enabled: true
      allow_from_namespaces:
        - syn-infra-monitoring
        - additional-namespace

    # Test unsetting resource requests & limits
    resources:
      application_controller: null
      redis: null
      repo_server: null
      repo_server_vault_agent: null
      server: null

    # Test operator params
    operator:
      migrate: true
      env:
        FOO: bar
      controller_cluster_role_selectors:
        admin:
          matchLabels:
            rbac.authorization.k8s.io/aggregate-to-admin: "true"
        appcontroller:
          matchLabels:
            syn.tools/aggregate-to-argocd-application-controller: "true"
      server_cluster_role_selectors:
        server:
          matchLabels:
            syn.tools/aggregate-to-argocd-server: "true"

    instances:
      another-ns/nulled: null
      third-ns/foo: {}
      some-namespace/some-argocd:
        config:
          spec:
            sso:
              provider: dex
              dex:
                openShiftOAuth: true
            rbac:
              defaultPolicy: role:none
              scopes: '[groups]'
              policy: |
                g, corp-admin, role:admin
            sourceNamespaces:
              - corp-argocdapps
            server:
              host: argocd.example.com
              route:
                enabled: true
                tls:
                  termination: reencrypt
            version: v2.10.1

        projectDefaults:
          spec:
            clusterResourceWhitelist: []
            destinations:
              - namespace: corp-*
                server: https://kubernetes.default.svc

        projects:
          nulled-project: null
          some-project:
            spec:
              sourceNamespaces:
                - one
          other-project:
            spec:
              sourceNamespaces:
                - two
              destinations:
                - namespace: other-*
                  server: https://kubernetes.default.svc

    resource_exclusions:
      custom:
        - apiGroups:
            - custom.io
          kinds:
            - ClusterWrecker
          clusters:
            - "*"
      nope: null
