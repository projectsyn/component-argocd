/**
 * \file argocd.libjsonnet
 * \brief methods to create Argo CD Applications and Projects
 */


local kap = import 'lib/kapitan.libjsonnet';
local inv = kap.inventory();
local params = inv.parameters.argocd;

/**
 * \brief `ArgoApp` creates an Argo CD Application
 *
 * \arg `component` (required) the name of the app
 * \arg `namespace` (required) the namespace where to deploy the app
 * \arg `project` the Argo CD project for this app. Default: 'syn'
 * \arg `secrets` if the Kapitan plugin should be used to reveal secrets from Vault. Default: 'true'
 *
 * \returns an Argo CD Application object
 *
 * See the documentation https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#applications
 */
local ArgoApp(component, namespace, project='syn', secrets=true) = {
  apiVersion: 'argoproj.io/v1alpha1',
  kind: 'Application',
  metadata: {
    name: component,
    namespace: params.namespace,
    finalizers: [
      'resources-finalizer.argocd.argoproj.io',
    ],
  },
  spec: {
    project: project,
    source: {
      repoURL: inv.parameters.cluster.catalog_url,
      targetRevision: 'HEAD',
      path: 'manifests/' + component,
    } + if secrets then {
      plugin: {
        name: 'kapitan',
      },
    } else {
      directory: {
        recurse: true,
      },
    },
    syncPolicy: {
      automated: {
        prune: true,
        selfHeal: true,
      },
    },
    destination: {
      server: 'https://kubernetes.default.svc',
      namespace: namespace,
    },
  },
};

/**
 * \brief `ArgoProject` creates an Argo CD AppProject
 *
 * \arg `name` (required) the name of the project
 *
 * \returns an Argo CD AppProject object
 *
 * See the documentation https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#projects
 */
local ArgoProject(name) = {
  apiVersion: 'argoproj.io/v1alpha1',
  kind: 'AppProject',
  metadata: {
    name: name,
    namespace: params.namespace,
  },
  spec: {
    sourceRepos: [
      inv.parameters.cluster.catalog_url,
    ],
    destinations: [ {
      server: 'https://kubernetes.default.svc',
      namespace: '*',
    } ],
    orphanedResources: {
      warn: false,
    },
    clusterResourceWhitelist: [ {
      group: '*',
      kind: '*',
    } ],
  },
};

{
  App: ArgoApp,
  Project: ArgoProject,
}
